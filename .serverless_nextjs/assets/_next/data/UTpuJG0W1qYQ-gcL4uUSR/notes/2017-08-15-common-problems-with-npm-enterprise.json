{
  "pageProps": {
    "post": {
      "mdxSource": {
        "compiledSource": "\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Using a private registry like NPM Enterprise (NPM E) is a great way to\\nshare proprietary code across a large development team. Developers can install, find, and\\npublish private modules, using the same basic \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm\"), \" CLI they're used to.\"), mdx(\"p\", null, \"Sadly, NPM's error output is often misleading about the actual underlying problem,\\nand having two registries can often lead to further misdirection.\"), mdx(\"p\", null, \"The following is a quick guide to handling some of the more common and frustrating issues.\"), mdx(\"h2\", {\n    \"id\": \"a-quick-definition-of-terms\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#a-quick-definition-of-terms\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"A quick definition of terms\"), mdx(\"p\", null, \"Most of the issues involve adjusting your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".npmrc\"), \" files or using module\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.npmjs.com/misc/scope\"\n  }), \"scopes\"), \". If you don't know about either of\\nthese, read on. Otherwise, feel free to skip down to troubleshooting.\"), mdx(\"h3\", {\n    \"id\": \"what-is-an-npmrc-file\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#what-is-an-npmrc-file\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"What is an \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \".npmrc\"), \" file?\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".npmrc\"), \" (or sometimes just \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npmrc\"), \") file is a configuration file for npm.\\nIt's effectively a key-value store, and it's location determines it's scope of\\ncontrol over npm modules.\"), mdx(\"p\", null, \"You can configure it...\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"in config file that comes with npm: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/path/to/npm/npmrc\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"globally on this machine: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$PREFIX/etc/npmrc\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"for the current user: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"~/.npmrc\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"on a per project-basis project: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/path/to/my/project/.npmrc\"))), mdx(\"p\", null, \"Configuration options are resolved in order of priority. The project-level\\nconfiguration overrides the user's settings, and the user's settings override\\nthe global machine settings, and so on.\"), mdx(\"p\", null, \"For local development, I only ever update the configuration in\\nmy home directory, and in the project directory. Only your test/build\\nserver should ever really be concerned about configuring any other \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npmrc\"), \" file.\"), mdx(\"p\", null, \"Full details on configuring npmrc files can be found \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.npmjs.com/files/npmrc\"\n  }), \"here\"), \".\"), mdx(\"h3\", {\n    \"id\": \"why-use-a-scope\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#why-use-a-scope\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Why use a scope?\"), mdx(\"p\", null, \"If you're using a private registry, it's a good practice to group your proprietary\\nmodules under at least one scope. Using a scope helps signal which modules are\\nprivate, and also allows for more granular configuration in your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npmrc\"), \" files.\"), mdx(\"p\", null, \"Read more about module scopes \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.npmjs.com/misc/scope\"\n  }), \"here\")), mdx(\"p\", null, \"I'll go over how these work together in the examples below.\"), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"troubleshooting-installs\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#troubleshooting-installs\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Troubleshooting installs\"), mdx(\"p\", null, \"Generally, install issues boil down to pointing to the right registry,\\nfor the right scope.\"), mdx(\"h3\", {\n    \"id\": \"when-npm-cant-find-an-open-source-library-that-you-know-exists\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#when-npm-cant-find-an-open-source-library-that-you-know-exists\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"When npm can't find an open-source library that you know exists:\"), mdx(\"pre\", {\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-gray-400 italic\"\n  }), \"# example error output\"), \"\\nNo matching version found \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"for\"), \" some-library@x.x.x\\n\")), mdx(\"p\", null, \"One of the benefits of NPM E is that it can be installed on whatever\\nserver you like, including on-premise. When mirroring packages, this can often\\nlead to faster installs and builds.\"), mdx(\"p\", null, \"The downside to this is that after your team mirrors enough packages, your NPM E\\ninstance can start falling out of sync with the main registry.\"), mdx(\"h4\", {\n    \"id\": \"solutions\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#solutions\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Solutions\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If you're the one running ops on your registry,\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://npme.npmjs.com/docs/troubleshooting/replication.html\"\n  }), \"The NPM CLI on the server can\"), \"\\nto get your modules back in sync.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If you don't have access to your NPM E instance, then I'd suggest pointing to\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://registry.npmjs.org/\"\n  }), \"https://registry.npmjs.org/\"), \" as your main registry, and falling back to\\nyour private registery for your scoped modules.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Here's an example `npmrc` file with this kind of pass-through configuration:\\n\")))), mdx(\"pre\", {\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-gray-400 italic\"\n  }), \"# Example Environment Setup:\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"registry\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \"https://registry.npmjs.org/\\n@yourscope:registry\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \"https://your.registry\\n//your.registry/:_authToken \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"your access token goes here\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\")), mdx(\"h3\", {\n    \"id\": \"when-npm-cant-find-an-scopedprivate-library-that-you-know-exists\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#when-npm-cant-find-an-scopedprivate-library-that-you-know-exists\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"When npm can't find an scoped/private library that you know exists:\"), mdx(\"pre\", {\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-gray-400 italic\"\n  }), \"# example error output\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"404\"), \" finding @yourscope/some-library\\n\")), mdx(\"p\", null, \"By default, NPM E checks authorization and ownership on all scoped modules.\\nIf you're using a scope, this can lead to some false positives on missing\\nmodules.\"), mdx(\"h4\", {\n    \"id\": \"solutions-1\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#solutions-1\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Solutions\"), mdx(\"p\", null, \"Only point your scope at your private registry, and point all\\nother modules at the main registry.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Set the scope globally for your user.\")), mdx(\"pre\", {\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"npm\"), \" config \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"set\"), \" registry https://registry.npmjs.org\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"npm\"), \" config \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"set\"), \" @scoped:registry https://your.registry\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"npm\"), \" config \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"set\"), \" //your.registry/:_authToken \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"your token\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Set the scope for just one project, by adding a npmrc at the root.\"), mdx(\"pre\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-gray-400 italic\"\n  }), \"# .npmrc file in the root of your project\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"registry\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \"https://registry.npmjs.org\\n@yourscope:registry\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \"https://your.registry\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Never\"), \" put your personal auth token in as part of your source code.\\nInstead, set your auth token as part of your user configuration.\"), mdx(\"pre\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"npm\"), \" config \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"set\"), \" //your.registry/:_authToken \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"your token\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\")))), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"troubleshooting-publishing\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#troubleshooting-publishing\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Troubleshooting Publishing\"), mdx(\"p\", null, \"Like installing, scopes are the main cause of publishing problems, but\\npackage.json configuration can also be an issue, especially with private\\nand proprietary code.\"), mdx(\"h3\", {\n    \"id\": \"publishing-a-module-returns-a-404\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#publishing-a-module-returns-a-404\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Publishing a module returns a 404.\"), mdx(\"pre\", {\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-gray-400 italic\"\n  }), \"# example error output\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"404\"), \" finding @yourscope/some-library\\n\")), mdx(\"p\", null, \"Publishing often has the least helpful error outputs, and most problems return\\nan unhelpful 404 error, rather than the real problem.\"), mdx(\"h4\", {\n    \"id\": \"solutions-2\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#solutions-2\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Solutions\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Your module's scope is pointed at the wrong registry. Update your user's \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".npmrc\"), \" file\\nwith the appropriate scopes and tokens.\")), mdx(\"pre\", {\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"npm\"), \" config \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"set\"), \" @scoped:registry https://your.registry\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"npm\"), \" config \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"set\"), \" //your.registry/:_authToken \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"your token\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Your module's \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"package.json\"), \" has a respository field, but you haven't set a\\nvalue for the url.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Your module's \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"package.json\"), \" is completely filled out, but your pointing\\nto a private git repository. Your git repo doesn't have to be public to the\\nworld, but it does have to be public to the registry.\")), mdx(\"hr\", null), mdx(\"p\", null, \"That should cover most of the frustrating errors. If you've come across other\\nstumbling blocks, let me know!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Using a private registry like NPM Enterprise (NPM E) is a great way to\nshare proprietary code across a large development team. Developers can install, find, and\npublish private modules, using the same basic <code>npm</code> CLI they&#x27;re used to.</p><p>Sadly, NPM&#x27;s error output is often misleading about the actual underlying problem,\nand having two registries can often lead to further misdirection.</p><p>The following is a quick guide to handling some of the more common and frustrating issues.</p><h2 id=\"a-quick-definition-of-terms\"><a href=\"#a-quick-definition-of-terms\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>A quick definition of terms</h2><p>Most of the issues involve adjusting your <code>.npmrc</code> files or using module\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.npmjs.com/misc/scope\">scopes</a>. If you don&#x27;t know about either of\nthese, read on. Otherwise, feel free to skip down to troubleshooting.</p><h3 id=\"what-is-an-npmrc-file\"><a href=\"#what-is-an-npmrc-file\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>What is an <code>.npmrc</code> file?</h3><p>The <code>.npmrc</code> (or sometimes just <code>npmrc</code>) file is a configuration file for npm.\nIt&#x27;s effectively a key-value store, and it&#x27;s location determines it&#x27;s scope of\ncontrol over npm modules.</p><p>You can configure it...</p><ul><li>in config file that comes with npm: <code>/path/to/npm/npmrc</code></li><li>globally on this machine: <code>$PREFIX/etc/npmrc</code></li><li>for the current user: <code>~/.npmrc</code></li><li>on a per project-basis project: <code>/path/to/my/project/.npmrc</code></li></ul><p>Configuration options are resolved in order of priority. The project-level\nconfiguration overrides the user&#x27;s settings, and the user&#x27;s settings override\nthe global machine settings, and so on.</p><p>For local development, I only ever update the configuration in\nmy home directory, and in the project directory. Only your test/build\nserver should ever really be concerned about configuring any other <code>npmrc</code> file.</p><p>Full details on configuring npmrc files can be found <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.npmjs.com/files/npmrc\">here</a>.</p><h3 id=\"why-use-a-scope\"><a href=\"#why-use-a-scope\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Why use a scope?</h3><p>If you&#x27;re using a private registry, it&#x27;s a good practice to group your proprietary\nmodules under at least one scope. Using a scope helps signal which modules are\nprivate, and also allows for more granular configuration in your <code>npmrc</code> files.</p><p>Read more about module scopes <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.npmjs.com/misc/scope\">here</a></p><p>I&#x27;ll go over how these work together in the examples below.</p><hr/><h2 id=\"troubleshooting-installs\"><a href=\"#troubleshooting-installs\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Troubleshooting installs</h2><p>Generally, install issues boil down to pointing to the right registry,\nfor the right scope.</p><h3 id=\"when-npm-cant-find-an-open-source-library-that-you-know-exists\"><a href=\"#when-npm-cant-find-an-open-source-library-that-you-know-exists\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>When npm can&#x27;t find an open-source library that you know exists:</h3><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"text-gray-400 italic\"># example error output</span>\nNo matching version found <span class=\"text-code-purple\">for</span> some-library@x.x.x\n</code></pre><p>One of the benefits of NPM E is that it can be installed on whatever\nserver you like, including on-premise. When mirroring packages, this can often\nlead to faster installs and builds.</p><p>The downside to this is that after your team mirrors enough packages, your NPM E\ninstance can start falling out of sync with the main registry.</p><h4 id=\"solutions\"><a href=\"#solutions\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Solutions</h4><ol><li><p>If you&#x27;re the one running ops on your registry,\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://npme.npmjs.com/docs/troubleshooting/replication.html\">The NPM CLI on the server can</a>\nto get your modules back in sync.</p></li><li><p>If you don&#x27;t have access to your NPM E instance, then I&#x27;d suggest pointing to\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://registry.npmjs.org/\">https://registry.npmjs.org/</a> as your main registry, and falling back to\nyour private registery for your scoped modules.</p><pre><code>Here&#x27;s an example `npmrc` file with this kind of pass-through configuration:\n</code></pre></li></ol><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"text-gray-400 italic\"># Example Environment Setup:</span>\n<span class=\"\">registry</span><span class=\"\">=</span>https://registry.npmjs.org/\n@yourscope:registry<span class=\"\">=</span>https://your.registry\n//your.registry/:_authToken <span class=\"text-code-white\">{</span>your access token goes here<span class=\"text-code-white\">}</span>\n</code></pre><h3 id=\"when-npm-cant-find-an-scopedprivate-library-that-you-know-exists\"><a href=\"#when-npm-cant-find-an-scopedprivate-library-that-you-know-exists\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>When npm can&#x27;t find an scoped/private library that you know exists:</h3><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"text-gray-400 italic\"># example error output</span>\n<span class=\"\">404</span> finding @yourscope/some-library\n</code></pre><p>By default, NPM E checks authorization and ownership on all scoped modules.\nIf you&#x27;re using a scope, this can lead to some false positives on missing\nmodules.</p><h4 id=\"solutions-1\"><a href=\"#solutions-1\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Solutions</h4><p>Only point your scope at your private registry, and point all\nother modules at the main registry.</p><ol><li>Set the scope globally for your user.</li></ol><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"text-code-blue\">npm</span> config <span class=\"\">set</span> registry https://registry.npmjs.org\n<span class=\"text-code-blue\">npm</span> config <span class=\"\">set</span> @scoped:registry https://your.registry\n<span class=\"text-code-blue\">npm</span> config <span class=\"\">set</span> //your.registry/:_authToken <span class=\"text-code-white\">{</span>your token<span class=\"text-code-white\">}</span>\n</code></pre><ol><li><p>Set the scope for just one project, by adding a npmrc at the root.</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"text-gray-400 italic\"># .npmrc file in the root of your project</span>\n<span class=\"\">registry</span><span class=\"\">=</span>https://registry.npmjs.org\n@yourscope:registry<span class=\"\">=</span>https://your.registry\n</code></pre><p><strong>Never</strong> put your personal auth token in as part of your source code.\nInstead, set your auth token as part of your user configuration.</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"text-code-blue\">npm</span> config <span class=\"\">set</span> //your.registry/:_authToken <span class=\"text-code-white\">{</span>your token<span class=\"text-code-white\">}</span>\n</code></pre></li></ol><hr/><h2 id=\"troubleshooting-publishing\"><a href=\"#troubleshooting-publishing\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Troubleshooting Publishing</h2><p>Like installing, scopes are the main cause of publishing problems, but\npackage.json configuration can also be an issue, especially with private\nand proprietary code.</p><h3 id=\"publishing-a-module-returns-a-404\"><a href=\"#publishing-a-module-returns-a-404\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Publishing a module returns a 404.</h3><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"text-gray-400 italic\"># example error output</span>\n<span class=\"\">404</span> finding @yourscope/some-library\n</code></pre><p>Publishing often has the least helpful error outputs, and most problems return\nan unhelpful 404 error, rather than the real problem.</p><h4 id=\"solutions-2\"><a href=\"#solutions-2\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Solutions</h4><ol><li>Your module&#x27;s scope is pointed at the wrong registry. Update your user&#x27;s <code>.npmrc</code> file\nwith the appropriate scopes and tokens.</li></ol><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"text-code-blue\">npm</span> config <span class=\"\">set</span> @scoped:registry https://your.registry\n<span class=\"text-code-blue\">npm</span> config <span class=\"\">set</span> //your.registry/:_authToken <span class=\"text-code-white\">{</span>your token<span class=\"text-code-white\">}</span>\n</code></pre><ol><li>Your module&#x27;s <code>package.json</code> has a respository field, but you haven&#x27;t set a\nvalue for the url.</li><li>Your module&#x27;s <code>package.json</code> is completely filled out, but your pointing\nto a private git repository. Your git repo doesn&#x27;t have to be public to the\nworld, but it does have to be public to the registry.</li></ol><hr/><p>That should cover most of the frustrating errors. If you&#x27;ve come across other\nstumbling blocks, let me know!</p>",
        "scope": {}
      },
      "frontMatter": {
        "wordCount": 826,
        "readingTime": {
          "text": "5 min read",
          "minutes": 4.12,
          "time": 247200.00000000003,
          "words": 824
        },
        "slug": "2017-08-15-common-problems-with-npm-enterprise",
        "fileName": "2017-08-15-common-problems-with-npm-enterprise.md",
        "title": "Common problems when using NPM Enterprise.",
        "date": "2017-08-15",
        "tags": ["node", "config"],
        "summary": "A better developer experience when using private registries",
        "draft": false
      }
    },
    "prev": {
      "title": "Setting up Erlang and Elixir from precompiled binaries.",
      "date": "2016-04-14",
      "tags": ["elixir"],
      "summary": "Skip the build step, and jump straight into development.",
      "slug": "2016-04-14-setting-up-erlang-and-elixir-from-precompiled-binaries"
    },
    "next": {
      "title": "Node isn't where you do work.",
      "date": "2017-09-02",
      "summary": "Push work to other systems, and let node coordinate your flow.",
      "tags": ["node", "architecture"],
      "slug": "2017-09-02-the-golden-rule-of-node-never-do-work"
    }
  },
  "__N_SSG": true
}
