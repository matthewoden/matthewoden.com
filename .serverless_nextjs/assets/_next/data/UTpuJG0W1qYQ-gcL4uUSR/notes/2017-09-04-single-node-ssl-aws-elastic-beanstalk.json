{
  "pageProps": {
    "post": {
      "mdxSource": {
        "compiledSource": "\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When I was developing \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gunshotsorfireworks.com\"\n  }), \"Gunshots or Fireworks\"), \",\\nI decided to experiment with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://aws.amazon.com/elasticbeanstalk/\"\n  }), \"AWS's Elastic Beanstalk\"), \"\\nfor deployment.\"), mdx(\"p\", null, \"If you've never used Elastic Beanstalk before, it's an opinionated wrapper around\\nAWS CloudFormation. In exchange for the full freedom and control of AWS, you\\nget speed. The main focus is be around taking your application from running\\nlocally to fully deployed in a matter of minutes. Which seemed perfect for a\\nlittle toy project like mine.\"), mdx(\"p\", null, \"My project didn't have huge requirements - I only needed to run on a t2.nano.\\nThe only tricky bit came from my use of the browser's Geolocation API, which meant\\nI needed my app served via HTTPS. That can be awkward for a single-container\\nenvironment. While setting up an Elastic Load Balancer would make HTTPS easy,\\nit'd easily triple my costs.\"), mdx(\"p\", null, \"Elastic Beanstalk doesn't expect you to load-balance single-container\\nenvironments, though. Instead, they provide a pre-configured instance of nginx\\non container itself. It's a nice little feature that keeps your app independent\\nof any proxy logic. When a small app needs to scale up, it's only a configuration\\nchange, rather than a code change.\"), mdx(\"p\", null, \"There's no UI option to configure nginx. Instead, each deployment must provide\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/ebextensions.html\"\n  }), \"one or more \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \".ebextension\"), \" files\"), \"\\nto handle container configuration. These files let you modify AWS Resources, run\\nbash scripts, grab dependancies from package managers, and more.\"), mdx(\"p\", null, \"If you're not familiar with SSL, Nginx, or AWS, configuring your environment\\ncould take a while. Below, you'll find the baseline configuration needed\\nto get up and running, along with an explanation of what's happening at each\\nstep. Hopefully it'll save you a few hours of scrounging the docs.\"), mdx(\"h2\", {\n    \"id\": \"the-plan-set-up-https-once-never-think-about-it-ever-again\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#the-plan-set-up-https-once-never-think-about-it-ever-again\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"The plan: Set up HTTPS once, never think about it ever again.\"), mdx(\"p\", null, \"Currently, this configuration does the following:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Terminates TLS on the proxy, forwarding requests to port \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"80\"), \" on the docker\\napplication itself.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Modifies your deployment environment to allows access to your deployment on\\nport \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"443\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automatically upgrades all requests to port \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"443\"), \" if they come in on port \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"80\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Installs certbot on the container instance.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"handles initial certificate creation.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"schedules a daily certificate renewal check.\")), mdx(\"p\", null, \"So let's get started! If you haven't already, create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".ebextension\"), \" directory at the root of\\nyour project. In that directory, create a new file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https-instance.config\"), \". We'll\\nbe adding options to this file in parts. At each new step, add the options shown\\nto the end of the file.\"), mdx(\"h2\", {\n    \"id\": \"step-1-define-aws-resources\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#step-1-define-aws-resources\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Step 1. Define AWS Resources\"), mdx(\"p\", null, \"The first thing we need to make sure we can even accept HTTPS traffic. We\\nneed the security group that's created with our environment to allow access\\non port 443. This is the first and only CloudFormation rule of our configuration.\"), mdx(\"p\", null, \"We'll set our port range from and to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"443\"), \" which limits SSL ingress\\nto just that port. To apply it to our security group, we're using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getAtt\"), \"\\nfunction to grab the GroupId \\\"Attribute\\\" off of the environment's security group.\"), mdx(\"pre\", {\n    \"className\": \"language-yaml\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Resources\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-gray-400 italic\"\n  }), \"# configure our securty group for port 443.\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"sslSecurityGroupIngress\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Type\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" AWS\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"EC2\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"SecurityGroupIngress\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Properties\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"GroupId\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"'Fn::GetAtt'\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"[\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), \"'AWSEBSecurityGroup'\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \",\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), \"'GroupId'\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"IpProtocol\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" tcp\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"ToPort\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"443\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"FromPort\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"443\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"CidrIp\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" 0.0.0.0/0\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" If you're configuring a pre-existing deployment environment, you may also need to\\nenable access to your security group on port \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"443\"), \" though the AWS console.\")), mdx(\"h2\", {\n    \"id\": \"step-2-configure-nginx\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#step-2-configure-nginx\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Step 2. Configure Nginx\"), mdx(\"p\", null, \"Next we'll be adding a few \\\"files\\\" outside of our application to configure\\nour nginx instance. First, let's set up a tiny little server that upgrades\\ntraffic from HTTP to HTTPS.\"), mdx(\"pre\", {\n    \"className\": \"language-yaml\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"files\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-gray-400 italic\"\n  }), \"# redirect http to docker server.\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"/etc/nginx/conf.d/http_custom_proxy.conf\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"mode\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), \"'000644'\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"owner\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" root\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"group\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" root\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"content\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"|\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"\\n      server {\\n        listen 80;\\n        return 301 https://$host$request_uri;\\n      }\"), \"\\n\")), mdx(\"p\", null, \"Next, we'll add server configuration for handling TLS termination.\\nThis file has all of our SSL options, the locations for our certificates, and\\na proxy to our application.\"), mdx(\"pre\", {\n    \"className\": \"language-yaml\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"/etc/nginx/conf.d/https_custom.pre\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"mode\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), \"'000644'\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"owner\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" root\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"group\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" root\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"content\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"|\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"\\n    # HTTPS Server\"), \"\\n\\n    server \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n      listen 443;\\n      server_name localhost;\\n\\n      ssl on;\\n\\n      ssl_certificate      /etc/letsencrypt/live/ebcert/fullchain.pem;\\n      ssl_certificate_key  /etc/letsencrypt/live/ebcert/privkey.pem;\\n\\n      ssl_session_timeout 5m;\\n\\n      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\\n      ssl_ciphers \\\"EECDH+AESGCM\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"EDH+AESGCM\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"AES256+EECDH\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"AES256+EDH\\\";\\n      ssl_prefer_server_ciphers on;\\n\\n      location / \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n        proxy_pass http\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"//docker;\\n        proxy_http_version 1.1;\\n\\n        proxy_set_header Connection \\\"\\\";\\n        proxy_set_header Host $host;\\n        proxy_set_header X\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"-\"), \"Real\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"-\"), \"IP $remote_addr;\\n        proxy_set_header X\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"-\"), \"Forwarded\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"-\"), \"For $proxy_add_x_forwarded_for;\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Did you notice that the file extension is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".pre\"), \" on this file? We'll change that to\\nthe standard \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".conf\"), \" once we've actually created the certificate files.\")), mdx(\"h2\", {\n    \"id\": \"step-3-container-configuration\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#step-3-container-configuration\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Step 3. Container Configuration\"), mdx(\"p\", null, \"By this point, we've opened up incoming traffic, and we're sending everything to\\nour app. All that's left is grab a few dependencies, and install certbot.\"), mdx(\"p\", null, \"There are two options presented here - packages, and container commands. The\\npackages option lets us use a few existing package managers, and container\\ncommands are individual bash scripts, run in alphabetical/numeric order.\"), mdx(\"p\", null, \"We'll use the packages option to grab \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://fedoraproject.org/wiki/EPEL\"\n  }), \"EPEL\"), \"\\nwhich is required by certbot.\"), mdx(\"pre\", {\n    \"className\": \"language-yaml\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"packages\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"yum\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"epel-release\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"[\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"]\"), \"\\n\")), mdx(\"p\", null, \"Then we kick off a series of container commands to install certbot, and handle\\nautomatic renewal.\"), mdx(\"pre\", {\n    \"className\": \"language-yaml\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"container_commands\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"00_create_dir\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"command\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), \"'mkdir -p /opt/certbot'\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"10_installcertbot\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"command\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), \"'wget https://dl.eff.org/certbot-auto  -O /opt/certbot/certbot-auto'\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"20_permission\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"command\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), \"'chmod a+x /opt/certbot/certbot-auto'\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"30_getcert\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"command\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), \"'sudo /opt/certbot/certbot-auto certonly --debug --non-interactive --email YOUR_EMAIL@YOUR_DOMAIN.com --agree-tos --standalone --domains YOUR_DOMAIN_HERE --keep-until-expiring --pre-hook \\\"sudo initctl stop nginx\\\" '\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"40_link\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"command\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), \"'ln -sf /etc/letsencrypt/live/YOUR_DOMAIN_HERE /etc/letsencrypt/live/ebcert'\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"50_config\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"command\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), \"'mv /etc/nginx/conf.d/https_custom.pre /etc/nginx/conf.d/https_custom.conf'\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"60_restartnginx\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"command\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), \"'sudo initctl restart nginx'\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"70_setrenewal\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"command\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" '(crontab \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"-\"), \"l ; echo ''0 6 * * * root /opt/certbot/certbot\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"-\"), \"auto renew \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"-\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"-\"), \"standalone \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"-\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"-\"), \"pre\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"-\"), \"hook \\\"service nginx stop\\\" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"-\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"-\"), \"post\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"-\"), \"hook \\\"service nginx start\\\" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"-\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"-\"), \"force\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"-\"), \"renew'') \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"|\"), \" crontab \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"-\"), \"'\\n\")), mdx(\"p\", null, \"It seems like there's a lot going on here, but it's mostly just paths. Even so,\\nit might be a good idea to go over what's happening at each step:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"00_create_dir\"), \" Create the working directory for certbot, if needed.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"10_installcertbot\"), \" Download certbot to our newly created directory.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"20_permission\"), \" Set certbot as executable.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"30_getcert\"), \" Get our first cert, if needed. We're using the standalone option\\nover the nginx plugin for stability.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Remember to change the email and domain lines!\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"40_link\"), \" Create a simlink between the our location of our certs, (which is\\ndomain specific) the live directory in our configuration (which is reusable).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"50_config\"), \" Now that we have certs in the right directory, we can rename our\\nssl config from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".pre\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".conf\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"60_restartnginx\"), \" Restart nginx to ensure that all of our options are set.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"70_setrenewal\"), \" Lists out the current cronjobs, and adds on a new one for our\\ncertbot renewal. All of which gets joined together, and piped back into crontab.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Note that our new cron job does stop and start nginx during renewal.\")))), mdx(\"p\", null, \"And that's it! If you've been following along, you should have a single\\nconfiguration file that's fairly reusable, and ready for your next \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eb deploy\"), \".\\nIf you have any questions, feel free to hit me up in the comments.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>When I was developing <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://gunshotsorfireworks.com\">Gunshots or Fireworks</a>,\nI decided to experiment with <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://aws.amazon.com/elasticbeanstalk/\">AWS&#x27;s Elastic Beanstalk</a>\nfor deployment.</p><p>If you&#x27;ve never used Elastic Beanstalk before, it&#x27;s an opinionated wrapper around\nAWS CloudFormation. In exchange for the full freedom and control of AWS, you\nget speed. The main focus is be around taking your application from running\nlocally to fully deployed in a matter of minutes. Which seemed perfect for a\nlittle toy project like mine.</p><p>My project didn&#x27;t have huge requirements - I only needed to run on a t2.nano.\nThe only tricky bit came from my use of the browser&#x27;s Geolocation API, which meant\nI needed my app served via HTTPS. That can be awkward for a single-container\nenvironment. While setting up an Elastic Load Balancer would make HTTPS easy,\nit&#x27;d easily triple my costs.</p><p>Elastic Beanstalk doesn&#x27;t expect you to load-balance single-container\nenvironments, though. Instead, they provide a pre-configured instance of nginx\non container itself. It&#x27;s a nice little feature that keeps your app independent\nof any proxy logic. When a small app needs to scale up, it&#x27;s only a configuration\nchange, rather than a code change.</p><p>There&#x27;s no UI option to configure nginx. Instead, each deployment must provide\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/ebextensions.html\">one or more <code>.ebextension</code> files</a>\nto handle container configuration. These files let you modify AWS Resources, run\nbash scripts, grab dependancies from package managers, and more.</p><p>If you&#x27;re not familiar with SSL, Nginx, or AWS, configuring your environment\ncould take a while. Below, you&#x27;ll find the baseline configuration needed\nto get up and running, along with an explanation of what&#x27;s happening at each\nstep. Hopefully it&#x27;ll save you a few hours of scrounging the docs.</p><h2 id=\"the-plan-set-up-https-once-never-think-about-it-ever-again\"><a href=\"#the-plan-set-up-https-once-never-think-about-it-ever-again\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>The plan: Set up HTTPS once, never think about it ever again.</h2><p>Currently, this configuration does the following:</p><ul><li>Terminates TLS on the proxy, forwarding requests to port <code>80</code> on the docker\napplication itself.</li><li>Modifies your deployment environment to allows access to your deployment on\nport <code>443</code>.</li><li>Automatically upgrades all requests to port <code>443</code> if they come in on port <code>80</code></li><li>Installs certbot on the container instance.</li><li>handles initial certificate creation.</li><li>schedules a daily certificate renewal check.</li></ul><p>So let&#x27;s get started! If you haven&#x27;t already, create a <code>.ebextension</code> directory at the root of\nyour project. In that directory, create a new file called <code>https-instance.config</code>. We&#x27;ll\nbe adding options to this file in parts. At each new step, add the options shown\nto the end of the file.</p><h2 id=\"step-1-define-aws-resources\"><a href=\"#step-1-define-aws-resources\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Step 1. Define AWS Resources</h2><p>The first thing we need to make sure we can even accept HTTPS traffic. We\nneed the security group that&#x27;s created with our environment to allow access\non port 443. This is the first and only CloudFormation rule of our configuration.</p><p>We&#x27;ll set our port range from and to <code>443</code> which limits SSL ingress\nto just that port. To apply it to our security group, we&#x27;re using the <code>getAtt</code>\nfunction to grab the GroupId &quot;Attribute&quot; off of the environment&#x27;s security group.</p><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"\">Resources</span><span class=\"text-code-white\">:</span>\n  <span class=\"text-gray-400 italic\"># configure our securty group for port 443.</span>\n  <span class=\"\">sslSecurityGroupIngress</span><span class=\"text-code-white\">:</span>\n    <span class=\"\">Type</span><span class=\"text-code-white\">:</span> AWS<span class=\"text-code-white\">:</span><span class=\"text-code-white\">:</span>EC2<span class=\"text-code-white\">:</span><span class=\"text-code-white\">:</span>SecurityGroupIngress\n    <span class=\"\">Properties</span><span class=\"text-code-white\">:</span>\n      <span class=\"\">GroupId</span><span class=\"text-code-white\">:</span> <span class=\"text-code-white\">{</span> <span class=\"\">&#x27;Fn::GetAtt&#x27;</span><span class=\"text-code-white\">:</span> <span class=\"text-code-white\">[</span><span class=\"text-code-green\">&#x27;AWSEBSecurityGroup&#x27;</span><span class=\"text-code-white\">,</span> <span class=\"text-code-green\">&#x27;GroupId&#x27;</span><span class=\"text-code-white\">]</span> <span class=\"text-code-white\">}</span>\n      <span class=\"\">IpProtocol</span><span class=\"text-code-white\">:</span> tcp\n      <span class=\"\">ToPort</span><span class=\"text-code-white\">:</span> <span class=\"\">443</span>\n      <span class=\"\">FromPort</span><span class=\"text-code-white\">:</span> <span class=\"\">443</span>\n      <span class=\"\">CidrIp</span><span class=\"text-code-white\">:</span> 0.0.0.0/0\n</code></pre><blockquote><p><strong>Note:</strong> If you&#x27;re configuring a pre-existing deployment environment, you may also need to\nenable access to your security group on port <code>443</code> though the AWS console.</p></blockquote><h2 id=\"step-2-configure-nginx\"><a href=\"#step-2-configure-nginx\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Step 2. Configure Nginx</h2><p>Next we&#x27;ll be adding a few &quot;files&quot; outside of our application to configure\nour nginx instance. First, let&#x27;s set up a tiny little server that upgrades\ntraffic from HTTP to HTTPS.</p><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"\">files</span><span class=\"text-code-white\">:</span>\n  <span class=\"text-gray-400 italic\"># redirect http to docker server.</span>\n  <span class=\"\">/etc/nginx/conf.d/http_custom_proxy.conf</span><span class=\"text-code-white\">:</span>\n    <span class=\"\">mode</span><span class=\"text-code-white\">:</span> <span class=\"text-code-green\">&#x27;000644&#x27;</span>\n    <span class=\"\">owner</span><span class=\"text-code-white\">:</span> root\n    <span class=\"\">group</span><span class=\"text-code-white\">:</span> root\n    <span class=\"\">content</span><span class=\"text-code-white\">:</span> <span class=\"text-code-white\">|</span><span class=\"\">\n      server {\n        listen 80;\n        return 301 https://$host$request_uri;\n      }</span>\n</code></pre><p>Next, we&#x27;ll add server configuration for handling TLS termination.\nThis file has all of our SSL options, the locations for our certificates, and\na proxy to our application.</p><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"\">/etc/nginx/conf.d/https_custom.pre</span><span class=\"text-code-white\">:</span>\n  <span class=\"\">mode</span><span class=\"text-code-white\">:</span> <span class=\"text-code-green\">&#x27;000644&#x27;</span>\n  <span class=\"\">owner</span><span class=\"text-code-white\">:</span> root\n  <span class=\"\">group</span><span class=\"text-code-white\">:</span> root\n  <span class=\"\">content</span><span class=\"text-code-white\">:</span> <span class=\"text-code-white\">|</span><span class=\"\">\n    # HTTPS Server</span>\n\n    server <span class=\"text-code-white\">{</span>\n      listen 443;\n      server_name localhost;\n\n      ssl on;\n\n      ssl_certificate      /etc/letsencrypt/live/ebcert/fullchain.pem;\n      ssl_certificate_key  /etc/letsencrypt/live/ebcert/privkey.pem;\n\n      ssl_session_timeout 5m;\n\n      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n      ssl_ciphers &quot;EECDH+AESGCM<span class=\"text-code-white\">:</span>EDH+AESGCM<span class=\"text-code-white\">:</span>AES256+EECDH<span class=\"text-code-white\">:</span>AES256+EDH&quot;;\n      ssl_prefer_server_ciphers on;\n\n      location / <span class=\"text-code-white\">{</span>\n        proxy_pass http<span class=\"text-code-white\">:</span>//docker;\n        proxy_http_version 1.1;\n\n        proxy_set_header Connection &quot;&quot;;\n        proxy_set_header Host $host;\n        proxy_set_header X<span class=\"text-code-white\">-</span>Real<span class=\"text-code-white\">-</span>IP $remote_addr;\n        proxy_set_header X<span class=\"text-code-white\">-</span>Forwarded<span class=\"text-code-white\">-</span>For $proxy_add_x_forwarded_for;\n      <span class=\"text-code-white\">}</span>\n    <span class=\"text-code-white\">}</span>\n</code></pre><blockquote><p>Did you notice that the file extension is <code>.pre</code> on this file? We&#x27;ll change that to\nthe standard <code>.conf</code> once we&#x27;ve actually created the certificate files.</p></blockquote><h2 id=\"step-3-container-configuration\"><a href=\"#step-3-container-configuration\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Step 3. Container Configuration</h2><p>By this point, we&#x27;ve opened up incoming traffic, and we&#x27;re sending everything to\nour app. All that&#x27;s left is grab a few dependencies, and install certbot.</p><p>There are two options presented here - packages, and container commands. The\npackages option lets us use a few existing package managers, and container\ncommands are individual bash scripts, run in alphabetical/numeric order.</p><p>We&#x27;ll use the packages option to grab <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://fedoraproject.org/wiki/EPEL\">EPEL</a>\nwhich is required by certbot.</p><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"\">packages</span><span class=\"text-code-white\">:</span>\n  <span class=\"\">yum</span><span class=\"text-code-white\">:</span>\n    <span class=\"\">epel-release</span><span class=\"text-code-white\">:</span> <span class=\"text-code-white\">[</span><span class=\"text-code-white\">]</span>\n</code></pre><p>Then we kick off a series of container commands to install certbot, and handle\nautomatic renewal.</p><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"\">container_commands</span><span class=\"text-code-white\">:</span>\n  <span class=\"\">00_create_dir</span><span class=\"text-code-white\">:</span>\n    <span class=\"\">command</span><span class=\"text-code-white\">:</span> <span class=\"text-code-green\">&#x27;mkdir -p /opt/certbot&#x27;</span>\n  <span class=\"\">10_installcertbot</span><span class=\"text-code-white\">:</span>\n    <span class=\"\">command</span><span class=\"text-code-white\">:</span> <span class=\"text-code-green\">&#x27;wget https://dl.eff.org/certbot-auto  -O /opt/certbot/certbot-auto&#x27;</span>\n  <span class=\"\">20_permission</span><span class=\"text-code-white\">:</span>\n    <span class=\"\">command</span><span class=\"text-code-white\">:</span> <span class=\"text-code-green\">&#x27;chmod a+x /opt/certbot/certbot-auto&#x27;</span>\n  <span class=\"\">30_getcert</span><span class=\"text-code-white\">:</span>\n    <span class=\"\">command</span><span class=\"text-code-white\">:</span> <span class=\"text-code-green\">&#x27;sudo /opt/certbot/certbot-auto certonly --debug --non-interactive --email YOUR_EMAIL@YOUR_DOMAIN.com --agree-tos --standalone --domains YOUR_DOMAIN_HERE --keep-until-expiring --pre-hook &quot;sudo initctl stop nginx&quot; &#x27;</span>\n  <span class=\"\">40_link</span><span class=\"text-code-white\">:</span>\n    <span class=\"\">command</span><span class=\"text-code-white\">:</span> <span class=\"text-code-green\">&#x27;ln -sf /etc/letsencrypt/live/YOUR_DOMAIN_HERE /etc/letsencrypt/live/ebcert&#x27;</span>\n  <span class=\"\">50_config</span><span class=\"text-code-white\">:</span>\n    <span class=\"\">command</span><span class=\"text-code-white\">:</span> <span class=\"text-code-green\">&#x27;mv /etc/nginx/conf.d/https_custom.pre /etc/nginx/conf.d/https_custom.conf&#x27;</span>\n  <span class=\"\">60_restartnginx</span><span class=\"text-code-white\">:</span>\n    <span class=\"\">command</span><span class=\"text-code-white\">:</span> <span class=\"text-code-green\">&#x27;sudo initctl restart nginx&#x27;</span>\n  <span class=\"\">70_setrenewal</span><span class=\"text-code-white\">:</span>\n    <span class=\"\">command</span><span class=\"text-code-white\">:</span> &#x27;(crontab <span class=\"text-code-white\">-</span>l ; echo &#x27;&#x27;0 6 * * * root /opt/certbot/certbot<span class=\"text-code-white\">-</span>auto renew <span class=\"text-code-white\">-</span><span class=\"text-code-white\">-</span>standalone <span class=\"text-code-white\">-</span><span class=\"text-code-white\">-</span>pre<span class=\"text-code-white\">-</span>hook &quot;service nginx stop&quot; <span class=\"text-code-white\">-</span><span class=\"text-code-white\">-</span>post<span class=\"text-code-white\">-</span>hook &quot;service nginx start&quot; <span class=\"text-code-white\">-</span><span class=\"text-code-white\">-</span>force<span class=\"text-code-white\">-</span>renew&#x27;&#x27;) <span class=\"text-code-white\">|</span> crontab <span class=\"text-code-white\">-</span>&#x27;\n</code></pre><p>It seems like there&#x27;s a lot going on here, but it&#x27;s mostly just paths. Even so,\nit might be a good idea to go over what&#x27;s happening at each step:</p><ul><li><code>00_create_dir</code> Create the working directory for certbot, if needed.</li><li><code>10_installcertbot</code> Download certbot to our newly created directory.</li><li><code>20_permission</code> Set certbot as executable.</li><li><code>30_getcert</code> Get our first cert, if needed. We&#x27;re using the standalone option\nover the nginx plugin for stability.<ul><li>Remember to change the email and domain lines!</li></ul></li><li><code>40_link</code> Create a simlink between the our location of our certs, (which is\ndomain specific) the live directory in our configuration (which is reusable).</li><li><code>50_config</code> Now that we have certs in the right directory, we can rename our\nssl config from <code>.pre</code> to <code>.conf</code>.</li><li><code>60_restartnginx</code> Restart nginx to ensure that all of our options are set.</li><li><code>70_setrenewal</code> Lists out the current cronjobs, and adds on a new one for our\ncertbot renewal. All of which gets joined together, and piped back into crontab.<ul><li>Note that our new cron job does stop and start nginx during renewal.</li></ul></li></ul><p>And that&#x27;s it! If you&#x27;ve been following along, you should have a single\nconfiguration file that&#x27;s fairly reusable, and ready for your next <code>eb deploy</code>.\nIf you have any questions, feel free to hit me up in the comments.</p>",
        "scope": {}
      },
      "frontMatter": {
        "wordCount": 1134,
        "readingTime": { "text": "6 min read", "minutes": 5.66, "time": 339600, "words": 1132 },
        "slug": "2017-09-04-single-node-ssl-aws-elastic-beanstalk",
        "fileName": "2017-09-04-single-node-ssl-aws-elastic-beanstalk.md",
        "title": "Setting up SSL for a single-instance deploy on Elastic Beanstalk, with Docker",
        "date": "2017-09-04",
        "tags": ["devops", "docker"],
        "draft": false,
        "summary": "A step by step guide to have https on your personal projects."
      }
    },
    "prev": {
      "title": "Node isn't where you do work.",
      "date": "2017-09-02",
      "summary": "Push work to other systems, and let node coordinate your flow.",
      "tags": ["node", "architecture"],
      "slug": "2017-09-02-the-golden-rule-of-node-never-do-work"
    },
    "next": {
      "title": "Converting from K3s to Docker Swarm",
      "date": "2021-02-14",
      "tags": ["devops", "docker"],
      "draft": false,
      "summary": "Sometimes, it's nice to scale down the homelab to something a little simpler.",
      "slug": "2021-02-14-converting-from-k3s-to-docker-swarm"
    }
  },
  "__N_SSG": true
}
