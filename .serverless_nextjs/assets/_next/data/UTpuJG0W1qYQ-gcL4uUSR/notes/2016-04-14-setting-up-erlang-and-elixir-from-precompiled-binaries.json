{
  "pageProps": {
    "post": {
      "mdxSource": {
        "compiledSource": "\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Itching to write Elixir? Are you not allowed, or don't want to use homebrew? Too lazy to compile from source? Here's step-by step instructions to get Elixir and Erlang up and running on your mac, using the precompiled binaries.\"), mdx(\"h2\", {\n    \"id\": \"setting-up-erlang\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#setting-up-erlang\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Setting up Erlang\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Download a precompiled version of Erlang from \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.erlang-solutions.com/resources/download.html\"\n  }), \"here\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Run that thing.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"When complete, type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"erl\"), \" in your terminal to test that erlang has been appropriately added to your path.\")), mdx(\"h2\", {\n    \"id\": \"setting-up-elixir\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#setting-up-elixir\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }), mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"icon icon-link\"\n  }))), \"Setting up Elixir\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Download the precompiled zip from latest, unzip, rename the folder to elixir.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Move the elixir folder to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"usr/local/\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mv ~/downloads/elixir usr/local/\"), \" (or... just copy and paste)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add the elixir binary to your path: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"echo 'export PATH=\\\"/usr/local/elixir/bin:$PATH\\\"' >> ~/.bash_profile\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Update your terminal session with the latest bindings \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \". ~/.bash_profile\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"test by typing \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"elixir\"), \" in your terminal.\")), mdx(\"p\", null, \"And that's it! Happy coding!\"), mdx(\"p\", null, \"(Tested on OS X El Capitan)\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: This post was migrated from a gist. \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"https://gist.github.com/matthewoden/a713412f4c7447cfeb2e2c06864686e2\"\n  }), \"https://gist.github.com/matthewoden/a713412f4c7447cfeb2e2c06864686e2\")))));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Itching to write Elixir? Are you not allowed, or don&#x27;t want to use homebrew? Too lazy to compile from source? Here&#x27;s step-by step instructions to get Elixir and Erlang up and running on your mac, using the precompiled binaries.</p><h2 id=\"setting-up-erlang\"><a href=\"#setting-up-erlang\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Setting up Erlang</h2><ol><li>Download a precompiled version of Erlang from <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.erlang-solutions.com/resources/download.html\">here</a>.</li><li>Run that thing.</li><li>When complete, type <code>erl</code> in your terminal to test that erlang has been appropriately added to your path.</li></ol><h2 id=\"setting-up-elixir\"><a href=\"#setting-up-elixir\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Setting up Elixir</h2><ol><li>Download the precompiled zip from latest, unzip, rename the folder to elixir.</li><li>Move the elixir folder to <code>usr/local/</code>: <code>mv ~/downloads/elixir usr/local/</code> (or... just copy and paste)</li><li>Add the elixir binary to your path: <code>echo &#x27;export PATH=&quot;/usr/local/elixir/bin:$PATH&quot;&#x27; &gt;&gt; ~/.bash_profile</code></li><li>Update your terminal session with the latest bindings <code>. ~/.bash_profile</code></li><li>test by typing <code>elixir</code> in your terminal.</li></ol><p>And that&#x27;s it! Happy coding!</p><p>(Tested on OS X El Capitan)</p><blockquote><p><em>Note: This post was migrated from a gist. <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://gist.github.com/matthewoden/a713412f4c7447cfeb2e2c06864686e2\">https://gist.github.com/matthewoden/a713412f4c7447cfeb2e2c06864686e2</a></em></p></blockquote>",
        "scope": {}
      },
      "frontMatter": {
        "wordCount": 162,
        "readingTime": { "text": "1 min read", "minutes": 0.8, "time": 48000, "words": 160 },
        "slug": "2016-04-14-setting-up-erlang-and-elixir-from-precompiled-binaries",
        "fileName": "2016-04-14-setting-up-erlang-and-elixir-from-precompiled-binaries.md",
        "title": "Setting up Erlang and Elixir from precompiled binaries.",
        "date": "2016-04-14",
        "tags": ["elixir"],
        "summary": "Skip the build step, and jump straight into development."
      }
    },
    "prev": null,
    "next": {
      "title": "Common problems when using NPM Enterprise.",
      "date": "2017-08-15",
      "tags": ["node", "config"],
      "summary": "A better developer experience when using private registries",
      "draft": false,
      "slug": "2017-08-15-common-problems-with-npm-enterprise"
    }
  },
  "__N_SSG": true
}
